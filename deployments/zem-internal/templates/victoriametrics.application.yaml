apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: victoria-metrics-{{ .Values.env }}
  namespace: argocd
spec:
  project: zem-internal-{{ .Values.env }}
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
  source:
    repoURL: https://victoriametrics.github.io/helm-charts/
    chart: victoria-metrics-single
    targetRevision: 0.22.0
    helm:
      releaseName: metalvictoria-metrics-single
      valuesObject:
        server:
          ingress:
            enabled: true
            ingressClassName: tailscale
            tls:
              - hosts:
                  - vm
            hosts:
              - name: vm
                path:
                  - /
                port: http
          scrape:
            enabled: true
            configMap: ""
            config:
              global:
                scrape_interval: 60s
              scrape_configs:
                - job_name: victoriametrics
                  static_configs:
                    - targets: ["localhost:8428"]
                - job_name: "kubernetes-apiservers"
                  kubernetes_sd_configs:
                    - role: endpoints
                  scheme: https
                  tls_config:
                    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                    insecure_skip_verify: true
                  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                  relabel_configs:
                    - source_labels:
                        [
                          __meta_kubernetes_namespace,
                          __meta_kubernetes_service_name,
                          __meta_kubernetes_endpoint_port_name,
                        ]
                      action: keep
                      regex: default;kubernetes;https
                - job_name: "kubernetes-nodes"
                  scheme: https
                  tls_config:
                    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                    insecure_skip_verify: true
                  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                  kubernetes_sd_configs:
                    - role: node
                  relabel_configs:
                    - action: labelmap
                      regex: __meta_kubernetes_node_label_(.+)
                    - target_label: __address__
                      replacement: kubernetes.default.svc:443
                    - source_labels: [__meta_kubernetes_node_name]
                      regex: (.+)
                      target_label: __metrics_path__
                      replacement: /api/v1/nodes/$1/proxy/metrics
                - job_name: "kubernetes-nodes-cadvisor"
                  scheme: https
                  tls_config:
                    ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                    insecure_skip_verify: true
                  bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                  kubernetes_sd_configs:
                    - role: node
                  relabel_configs:
                    - action: labelmap
                      regex: __meta_kubernetes_node_label_(.+)
                    - target_label: __address__
                      replacement: kubernetes.default.svc:443
                    - source_labels: [__meta_kubernetes_node_name]
                      regex: (.+)
                      target_label: __metrics_path__
                      replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
                  metric_relabel_configs:
                    - action: replace
                      source_labels: [pod]
                      regex: "(.+)"
                      target_label: pod_name
                      replacement: "${1}"
                    - action: replace
                      source_labels: [container]
                      regex: "(.+)"
                      target_label: container_name
                      replacement: "${1}"
                    - action: replace
                      target_label: name
                      replacement: k8s_stub
                    - action: replace
                      source_labels: [id]
                      regex: '^/system\.slice/(.+)\.service$'
                      target_label: systemd_service_name
                      replacement: "${1}"

                - job_name: "kubernetes-service-endpoints"
                  kubernetes_sd_configs:
                    - role: endpoints
                  relabel_configs:
                    # 1. Filter targets based on a specific annotation.
                    # This annotation on the Service tells Prometheus to scrape it.
                    # Example: service.beta.kubernetes.io/prometheus-scrape: "true"
                    # Or a more common one: prometheus.io/scrape: "true"
                    - source_labels:
                        [
                          __meta_kubernetes_service_annotation_prometheus_io_scrape,
                        ]
                      action: keep
                      regex: "true"

                    # 2. Get the metrics path from an annotation (default to /metrics)
                    # Example: prometheus.io/path: "/my-metrics-path"
                    - source_labels:
                        [
                          __meta_kubernetes_service_annotation_prometheus_io_path,
                        ]
                      action: replace
                      target_label: __metrics_path__
                      regex: (.+)

                    # 3. Get the port from an annotation (default to the first available port)
                    # Example: prometheus.io/port: "8080"
                    - source_labels:
                        [
                          __meta_kubernetes_service_annotation_prometheus_io_port,
                        ]
                      action: replace
                      target_label: __address__
                      regex: (.+)
                      replacement: "$$1:$$2" # This regex needs to be handled carefully in combination with target address below

                    # 4. Construct the target address using the service IP and detected port
                    # This combines the service IP with the port identified in the previous step.
                    - source_labels:
                        [
                          __address__,
                          __meta_kubernetes_service_annotation_prometheus_io_port,
                        ]
                      action: replace
                      regex: "([^:]+)(?::\\d+)?;(\\d+)" # Extracts IP and the annotated port
                      target_label: __address__
                      replacement: "$$1:$$2" # Correctly sets address to service-ip:annotated-port

                    # If no port annotation, use the first exposed port of the endpoint
                    - source_labels: [__address__]
                      regex: "(.+)" # Just ensuring the address is captured
                      target_label: __address__
                      replacement: "$$1" # If no port was specified via annotation, this keeps the original endpoint address (ip:port)

                    # 5. Add standard Kubernetes labels for better identification
                    - action: labelmap
                      regex: __meta_kubernetes_service_label_(.+)
                    - action: labelmap
                      regex: __meta_kubernetes_pod_label_(.+)
                    - source_labels: [__meta_kubernetes_namespace]
                      action: replace
                      target_label: kubernetes_namespace
                    - source_labels: [__meta_kubernetes_service_name]
                      action: replace
                      target_label: kubernetes_service_name
                    - source_labels: [__meta_kubernetes_pod_name]
                      action: replace
                      target_label: kubernetes_pod_name
                    - source_labels: [__meta_kubernetes_container_name]
                      action: replace
                      target_label: kubernetes_container_name
  destination:
    server: "https://kubernetes.default.svc"
    namespace: zem-internal-{{ .Values.env }}
