apiVersion: v1
data:
  config.alloy: |-

    // Core Alloy configuration
    logging {
      level = "info"
      format = "logfmt"
    }
    livedebugging {
      enabled = true
    }


    // Metrics provided by pods
    discovery.kubernetes "pods" {
      role = "pod"
    }
    prometheus.scrape "pods" {
      targets    = discovery.kubernetes.pods.targets
      forward_to = [prometheus.relabel.global_filter.receiver]
    }


    // Metrics provided by nodes / cAdvisor
    discovery.kubernetes "nodes" {
      role = "node"
    }
    prometheus.scrape "kubelet_cadvisor" {
      targets = discovery.kubernetes.nodes.targets

      scheme       = "https"
      metrics_path = "/metrics/cadvisor"

      tls_config {
        ca_file              = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
        insecure_skip_verify = true
      }

      bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      forward_to = [prometheus.relabel.global_filter.receiver]
    }

    // Kube-state-metrics integration
    discovery.kubernetes "kube_state_metrics_service" {
      role = "service"
      namespaces {
        names = ["monitoring"] // Or whatever namespace KSM is deployed in
      }
      selectors {
        role = "service"
        label = "app.kubernetes.io/name=kube-state-metrics"
      }
    }
    prometheus.scrape "kube_state_metrics" {
      targets = discovery.kubernetes.kube_state_metrics_service.targets
      forward_to = [prometheus.relabel.global_filter.receiver]
    }


    // Final Global filtering
    prometheus.relabel "global_filter" {
      forward_to = [prometheus.remote_write.default.receiver]

      rule {
        action        = "drop"
        source_labels = ["__name__"]
        regex         = "(node_systemd_unit_state)"
      }
    }

    // Grafana Cloud remote write configuration
    remote.kubernetes.secret "credentials" {
      namespace = {{ .Release.Namespace | quote }}
      name = "grafana-cloud-secret"
    }
    prometheus.remote_write "default" {
      endpoint {
        url = convert.nonsensitive(remote.kubernetes.secret.credentials.data["url"])

        basic_auth {
          username = convert.nonsensitive(remote.kubernetes.secret.credentials.data["username"])
          password = remote.kubernetes.secret.credentials.data["password"]
        }
      }
    }
kind: ConfigMap
metadata:
  name: alloy-config
